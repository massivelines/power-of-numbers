eval("function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar grossMarginDollars = function grossMarginDollars(volumeCurrentYear, unitsPerCase, retailPricePerUnit, costOfGoodsSoldCurrentYear) {\n  return volumeCurrentYear * Math.abs(unitsPerCase) * Math.abs(retailPricePerUnit) - volumeCurrentYear * Math.abs(costOfGoodsSoldCurrentYear);\n};\n\nvar pennyProfit = function pennyProfit(unitsPerCase, retailPricePerUnit, costOfGoodsSoldCurrentYear) {\n  return Math.abs(retailPricePerUnit) - Math.abs(costOfGoodsSoldCurrentYear) / Math.abs(unitsPerCase);\n};\n\nvar marginPercent = function marginPercent(unitsPerCase, retailPricePerUnit, costOfGoodsSoldCurrentYear) {\n  var pp = pennyProfit(unitsPerCase, retailPricePerUnit, costOfGoodsSoldCurrentYear);\n  return Math.abs(pp) / Math.abs(retailPricePerUnit);\n};\n\nvar averageInventory = function averageInventory(beginInventory, endInventory) {\n  return (Math.abs(beginInventory) + Math.abs(endInventory)) / 2;\n};\n\nvar averageInvAtCost = function averageInvAtCost(beginInventory, endInventory, costOfGoodsSoldCurrentYear) {\n  var ai = averageInventory(beginInventory, endInventory);\n  return Math.abs(ai) * Math.abs(costOfGoodsSoldCurrentYear);\n};\n\nvar inventoryTurns = function inventoryTurns(volumeCurrentYear, inventoryOnDisplay) {\n  return Math.abs(volumeCurrentYear) / Math.abs(inventoryOnDisplay);\n};\n\nvar gmroiiDollar = function gmroiiDollar(volumeCurrentYear, unitsPerCase, retailPricePerUnit, costOfGoodsSoldCurrentYear, beginInventory, endInventory) {\n  var gmd = grossMarginDollars(volumeCurrentYear, unitsPerCase, retailPricePerUnit, costOfGoodsSoldCurrentYear);\n  var aiat = averageInvAtCost(beginInventory, endInventory, costOfGoodsSoldCurrentYear);\n  return Math.abs(gmd) / Math.abs(aiat);\n};\n\nvar gmroiiPercent = function gmroiiPercent(volumeCurrentYear, unitsPerCase, retailPricePerUnit, costOfGoodsSoldCurrentYear, beginInventory, endInventory) {\n  var mp = marginPercent(unitsPerCase, retailPricePerUnit, costOfGoodsSoldCurrentYear);\n  var aiat = averageInvAtCost(beginInventory, endInventory, costOfGoodsSoldCurrentYear);\n  return mp * (volumeCurrentYear * Math.abs(unitsPerCase) * Math.abs(retailPricePerUnit) / aiat);\n};\n\nvar profPerSqFt = function profPerSqFt(volumeCurrentYear, unitsPerCase, retailPricePerUnit, costOfGoodsSoldCurrentYear, squareFtOfSellSpace) {\n  var gmd = grossMarginDollars(volumeCurrentYear, unitsPerCase, retailPricePerUnit, costOfGoodsSoldCurrentYear);\n  return Math.abs(gmd) / Math.abs(squareFtOfSellSpace);\n};\n\nvar costPerSqFt = function costPerSqFt(volumeCurrentYear, costOfGoodsSoldCurrentYear, squareFtOfSellSpace) {\n  return Math.abs(costOfGoodsSoldCurrentYear) * volumeCurrentYear / Math.abs(squareFtOfSellSpace);\n};\n\nvar breakEven = function breakEven(currentGrossMarginDollars, proposedGrossMarginDollars, currentVolume) {\n  return Math.abs(currentGrossMarginDollars) / Math.abs(proposedGrossMarginDollars) - Math.abs(currentVolume);\n};\n\ndefine('modules/custCalc',[],function () {\n  return _defineProperty({\n    grossMarginDollars: grossMarginDollars,\n    pennyProfit: pennyProfit,\n    marginPercent: marginPercent,\n    averageInventory: averageInventory,\n    averageInvAtCost: averageInvAtCost,\n    inventoryTurns: inventoryTurns,\n    gmroiiDollar: gmroiiDollar,\n    gmroiiPercent: gmroiiPercent,\n    profPerSqFt: profPerSqFt,\n    costPerSqFt: costPerSqFt,\n    breakEven: breakEven\n  }, \"breakEven\", breakEven);\n});\n//# sourceMappingURL=custCalc.js.map\n\n//# sourceURL=/modules/custCalc.js"),eval("define('modules/custFormulas',['modules/custCalc'], function (custCalc) {\n  var REGEX_WHOLE_NUMBER = '\\\\d*';\n  var REGEX_CURRENCY = '\\\\d+(\\\\.\\\\d{2})?';\n  var REGEX_PERCENTAGE = '[0-9]+([\\\\.,][0-9]+)?';\n  var volumeCurrentYear = {\n    id: 'volumeCurrentYear',\n    label: 'Volume',\n    dataFormat: 'whole',\n    pattern: REGEX_WHOLE_NUMBER\n  };\n  var unitsPerCase = {\n    id: 'unitsPerCase',\n    label: 'Units in a Case',\n    dataFormat: 'whole',\n    pattern: REGEX_WHOLE_NUMBER\n  };\n  var retailPricePerUnit = {\n    id: 'retailPricePerUnit',\n    label: 'Retail Price Per Unit',\n    dataFormat: 'currency',\n    pattern: REGEX_CURRENCY\n  };\n  var costOfGoodsSoldCurrentYear = {\n    id: 'costOfGoodsSoldCurrentYear',\n    label: 'Product Cost Per Case',\n    dataFormat: 'currency',\n    pattern: REGEX_CURRENCY\n  };\n  var beginInventory = {\n    id: 'beginInventory',\n    label: 'Beginning Inventory',\n    dataFormat: 'whole',\n    pattern: REGEX_WHOLE_NUMBER\n  };\n  var endInventory = {\n    id: 'endInventory',\n    label: 'Ending Inventory',\n    dataFormat: 'whole',\n    pattern: REGEX_WHOLE_NUMBER\n  };\n  var inventoryOnDisplay = {\n    id: 'inventoryOnDisplay',\n    label: 'Inventory on Display',\n    dataFormat: 'whole',\n    pattern: REGEX_WHOLE_NUMBER\n  };\n  var squareFtOfSellSpace = {\n    id: 'squareFtOfSellSpace',\n    label: 'Square Feet of Selling Space',\n    dataFormat: 'whole',\n    pattern: REGEX_WHOLE_NUMBER\n  };\n  var currentVolume = {\n    id: 'currentVolume',\n    label: 'Current Volume',\n    dataFormat: 'whole',\n    pattern: REGEX_WHOLE_NUMBER\n  };\n  var currentGrossMarginDollars = {\n    id: 'currentGrossMarginDollars',\n    label: 'Current Gross Margin Dollars (Profit)',\n    dataFormat: 'currency',\n    pattern: REGEX_CURRENCY\n  };\n  var proposedGrossMarginDollars = {\n    id: 'proposedGrossMarginDollars',\n    label: 'Proposed Gross Margin Dollars (Profit) Per Case',\n    dataFormat: 'currency',\n    pattern: REGEX_CURRENCY\n  };\n  return {\n    grossMarginDollars: {\n      title: 'Gross Margin Dollars (Profit)',\n      id: 'grossMarginDollars',\n      outputType: 'currency',\n      formula: custCalc.grossMarginDollars,\n      inputs: {\n        1: volumeCurrentYear,\n        2: unitsPerCase,\n        3: retailPricePerUnit,\n        4: costOfGoodsSoldCurrentYear\n      }\n    },\n    pennyProfit: {\n      title: 'Penny Profit',\n      id: 'pennyProfit',\n      outputType: 'currency',\n      formula: custCalc.pennyProfit,\n      inputs: {\n        1: unitsPerCase,\n        2: retailPricePerUnit,\n        3: costOfGoodsSoldCurrentYear\n      }\n    },\n    marginPercent: {\n      title: 'Margin Percent',\n      id: 'marginPercent',\n      outputType: 'percentage',\n      formula: custCalc.marginPercent,\n      inputs: {\n        1: unitsPerCase,\n        2: retailPricePerUnit,\n        3: costOfGoodsSoldCurrentYear\n      }\n    },\n    averageInventory: {\n      title: 'Average Inventory',\n      id: 'averageInventory',\n      outputType: 'rounded',\n      formula: custCalc.averageInventory,\n      inputs: {\n        1: beginInventory,\n        2: endInventory\n      }\n    },\n    averageInvAtCost: {\n      title: 'Average Inventory at Cost',\n      id: 'averageInvAtCost',\n      outputType: 'currency',\n      formula: custCalc.averageInvAtCost,\n      inputs: {\n        1: costOfGoodsSoldCurrentYear,\n        2: beginInventory,\n        3: endInventory\n      }\n    },\n    inventoryTurns: {\n      title: 'Inventory Turns',\n      id: 'inventoryTurns',\n      outputType: 'rounded',\n      formula: custCalc.inventoryTurns,\n      inputs: {\n        1: volumeCurrentYear,\n        2: inventoryOnDisplay\n      }\n    },\n    gmroiiDollar: {\n      title: 'GMROII ($)',\n      id: 'gmroiiDollar',\n      outputType: 'currency',\n      formula: custCalc.gmroiiDollar,\n      inputs: {\n        1: volumeCurrentYear,\n        2: unitsPerCase,\n        3: retailPricePerUnit,\n        4: costOfGoodsSoldCurrentYear,\n        5: beginInventory,\n        6: endInventory\n      }\n    },\n    gmroiiPercent: {\n      title: 'GMROII (%)',\n      id: 'gmroiiPercent',\n      outputType: 'percentage',\n      formula: custCalc.gmroiiPercent,\n      inputs: {\n        1: volumeCurrentYear,\n        2: unitsPerCase,\n        3: retailPricePerUnit,\n        4: costOfGoodsSoldCurrentYear,\n        5: beginInventory,\n        6: endInventory\n      }\n    },\n    profPerSqFt: {\n      title: 'Profit per Square Foot',\n      id: 'profPerSqFt',\n      outputType: 'currency',\n      formula: custCalc.profPerSqFt,\n      inputs: {\n        1: volumeCurrentYear,\n        2: unitsPerCase,\n        3: retailPricePerUnit,\n        4: costOfGoodsSoldCurrentYear,\n        5: squareFtOfSellSpace\n      }\n    },\n    costPerSqFt: {\n      title: 'Cost per Square Foot',\n      id: 'costPerSqFt',\n      outputType: 'currency',\n      formula: custCalc.costPerSqFt,\n      inputs: {\n        1: volumeCurrentYear,\n        2: costOfGoodsSoldCurrentYear,\n        3: squareFtOfSellSpace\n      }\n    },\n    breakEven: {\n      title: 'Breakeven',\n      id: 'breakEven',\n      outputType: 'integer',\n      formula: custCalc.breakEven,\n      inputs: {\n        1: currentVolume,\n        2: currentGrossMarginDollars,\n        3: proposedGrossMarginDollars\n      }\n    }\n  };\n});\n//# sourceMappingURL=custFormulas.js.map\n\n//# sourceURL=/modules/custFormulas.js"),eval("var revenueCurrentYear = function revenueCurrentYear(volumeCurrentYear, netPriceCurrentYear) {\n  return Math.abs(volumeCurrentYear) * Math.abs(netPriceCurrentYear);\n};\n\nvar netRevenueCurrentYear = function netRevenueCurrentYear(volumeCurrentYear, deadNetCurrentYear) {\n  return Math.abs(volumeCurrentYear) * Math.abs(deadNetCurrentYear);\n};\n\nvar netRevenuePriorYear = function netRevenuePriorYear(volumePriorYear, deadNetPriorYear) {\n  return Math.abs(volumePriorYear) * Math.abs(deadNetPriorYear);\n};\n\nvar netRevenuePerCaseCurrentYear = function netRevenuePerCaseCurrentYear(volumeCurrentYear, deadNetCurrentYear) {\n  var netRevenueCY = netRevenueCurrentYear(volumeCurrentYear, deadNetCurrentYear);\n  return Math.abs(netRevenueCY) / Math.abs(volumeCurrentYear);\n};\n\nvar marginalContributionCurrentYear = function marginalContributionCurrentYear(volumeCurrentYear, deadNetCurrentYear, costOfGoodsSoldCurrentYear) {\n  var netRevenueCY = netRevenueCurrentYear(volumeCurrentYear, deadNetCurrentYear);\n  return Math.abs(netRevenueCY) - Math.abs(costOfGoodsSoldCurrentYear) * volumeCurrentYear;\n};\n\nvar marginalContributionPriorYear = function marginalContributionPriorYear(volumePriorYear, deadNetPriorYear, costOfGoodsSoldPriorYear) {\n  var netRevenuePY = netRevenuePriorYear(volumePriorYear, deadNetPriorYear);\n  return Math.abs(netRevenuePY) - Math.abs(costOfGoodsSoldPriorYear) * volumePriorYear;\n};\n\nvar marginalContributionPerCaseCurrentYear = function marginalContributionPerCaseCurrentYear(volumeCurrentYear, deadNetCurrentYear, costOfGoodsSoldCurrentYear) {\n  var mcCY = marginalContributionCurrentYear(volumeCurrentYear, deadNetCurrentYear, costOfGoodsSoldCurrentYear);\n  return Math.abs(mcCY) / volumeCurrentYear;\n};\n\nvar marginalContributionPerCasePriorYear = function marginalContributionPerCasePriorYear(volumePriorYear, deadNetPriorYear, costOfGoodsSoldPriorYear) {\n  var mcPY = marginalContributionPriorYear(volumePriorYear, deadNetPriorYear, costOfGoodsSoldPriorYear);\n  return Math.abs(mcPY) / volumePriorYear;\n};\n\nvar marginalContributionFlowThru = function marginalContributionFlowThru(deadNetCurrentYear, deadNetPriorYear, costOfGoodsSoldCurrentYear, costOfGoodsSoldPriorYear) {\n  return (deadNetCurrentYear - costOfGoodsSoldCurrentYear - (deadNetPriorYear - costOfGoodsSoldPriorYear)) / (deadNetCurrentYear - deadNetPriorYear);\n};\n\nvar toplineGrowth = function toplineGrowth(volumeCurrentYear, volumePriorYear, deadNetCurrentYear, deadNetPriorYear) {\n  return (volumeCurrentYear - volumePriorYear) / Math.abs(volumePriorYear) + (deadNetCurrentYear - deadNetPriorYear) / Math.abs(deadNetPriorYear);\n};\n\ndefine('modules/intCalc',[],function () {\n  return {\n    revenueCurrentYear: revenueCurrentYear,\n    netRevenueCurrentYear: netRevenueCurrentYear,\n    netRevenuePriorYear: netRevenuePriorYear,\n    netRevenuePerCaseCurrentYear: netRevenuePerCaseCurrentYear,\n    marginalContributionCurrentYear: marginalContributionCurrentYear,\n    marginalContributionPriorYear: marginalContributionPriorYear,\n    marginalContributionPerCaseCurrentYear: marginalContributionPerCaseCurrentYear,\n    marginalContributionPerCasePriorYear: marginalContributionPerCasePriorYear,\n    marginalContributionFlowThru: marginalContributionFlowThru,\n    toplineGrowth: toplineGrowth\n  };\n});\n//# sourceMappingURL=intCalc.js.map\n\n//# sourceURL=/modules/intCalc.js"),eval("define('modules/intFormulas',['modules/intCalc'], function (intCalc) {\n  var REGEX_WHOLE_NUMBER = '\\\\d*';\n  var REGEX_CURRENCY = '\\\\d+(\\\\.\\\\d{2})?';\n  var REGEX_PERCENTAGE = '[0-9]+([\\\\.,][0-9]+)?';\n  var volumeCurrentYear = {\n    id: 'volumeCurrentYear',\n    label: 'Volume',\n    year: 'current',\n    dataFormat: 'whole',\n    pattern: REGEX_WHOLE_NUMBER\n  };\n  var volumePriorYear = {\n    id: 'volumePriorYear',\n    label: 'Volume',\n    year: 'prior',\n    dataFormat: 'whole',\n    pattern: REGEX_WHOLE_NUMBER\n  };\n  var netPriceCurrentYear = {\n    id: 'netPriceCurrentYear',\n    label: 'Net Price',\n    year: 'current',\n    dataFormat: 'currency',\n    pattern: REGEX_CURRENCY\n  };\n  var deadNetCurrentYear = {\n    id: 'deadNetCurrentYear',\n    label: 'Dead Net Price',\n    year: 'current',\n    dataFormat: 'currency',\n    pattern: REGEX_CURRENCY\n  };\n  var deadNetPriorYear = {\n    id: 'deadNetPriorYear',\n    label: 'Dead Net Price',\n    year: 'prior',\n    dataFormat: 'currency',\n    pattern: REGEX_CURRENCY\n  };\n  var costOfGoodsSoldCurrentYear = {\n    id: 'costOfGoodsSoldCurrentYear',\n    label: 'Cost Of Goods Sold Per Case',\n    year: 'current',\n    dataFormat: 'currency',\n    pattern: REGEX_CURRENCY\n  };\n  var costOfGoodsSoldPriorYear = {\n    id: 'costOfGoodsSoldPriorYear',\n    label: 'Cost Of Goods Sold Per Case',\n    year: 'prior',\n    dataFormat: 'currency',\n    pattern: REGEX_CURRENCY\n  };\n  return {\n    revenueCurrentYear: {\n      title: 'Revenue',\n      id: 'revenueCurrentYear',\n      outputType: 'currency',\n      formula: intCalc.revenueCurrentYear,\n      inputs: {\n        1: volumeCurrentYear,\n        2: netPriceCurrentYear\n      }\n    },\n    netRevenueCurrentYear: {\n      title: 'Net Revenue',\n      id: 'netRevenueCurrentYear',\n      outputType: 'currency',\n      formula: intCalc.netRevenueCurrentYear,\n      inputs: {\n        1: volumeCurrentYear,\n        2: deadNetCurrentYear\n      }\n    },\n    netRevenuePerCaseCurrentYear: {\n      title: 'Net Revenue Per Case',\n      id: 'netRevenuePerCaseCurrentYear',\n      outputType: 'currency',\n      formula: intCalc.netRevenuePerCaseCurrentYear,\n      inputs: {\n        1: volumeCurrentYear,\n        2: deadNetCurrentYear\n      }\n    },\n    marginalContributionCurrentYear: {\n      title: \"Marginal Contribution (MC $'s)\",\n      id: 'marginalContributionCurrentYear',\n      outputType: 'currency',\n      formula: intCalc.marginalContributionCurrentYear,\n      previousYearDisabled: true,\n      inputs: {\n        1: volumeCurrentYear,\n        2: deadNetCurrentYear,\n        3: costOfGoodsSoldCurrentYear\n      }\n    },\n    marginalContributionPerCaseCurrentYear: {\n      title: 'Marginal Contribution Per Case',\n      id: 'marginalContributionPerCaseCurrentYear',\n      outputType: 'currency',\n      formula: intCalc.marginalContributionPerCaseCurrentYear,\n      previousYearDisabled: true,\n      inputs: {\n        1: volumeCurrentYear,\n        2: deadNetCurrentYear,\n        3: costOfGoodsSoldCurrentYear\n      }\n    },\n    marginalContributionFlowThru: {\n      title: 'Marginal Contribution Flow Thru',\n      id: 'marginalContributionFlowThru',\n      outputType: 'percentage',\n      formula: intCalc.marginalContributionFlowThru,\n      previousYearDisabled: true,\n      sections: {\n        1: {\n          id: 'deadNetPrice',\n          title: 'Dead Net Price',\n          inputs: {\n            1: deadNetCurrentYear,\n            2: deadNetPriorYear\n          }\n        },\n        2: {\n          id: 'costOfGoodsSoldPerCase',\n          title: 'Cost Of Goods Sold Per Case',\n          inputs: {\n            1: costOfGoodsSoldCurrentYear,\n            2: costOfGoodsSoldPriorYear\n          }\n        }\n      }\n    },\n    toplineGrowth: {\n      title: 'Topline Growth',\n      id: 'toplineGrowth',\n      outputType: 'percentage',\n      formula: intCalc.toplineGrowth,\n      previousYearDisabled: true,\n      sections: {\n        1: {\n          id: 'volume',\n          title: 'Volume',\n          inputs: {\n            1: volumeCurrentYear,\n            2: volumePriorYear\n          }\n        },\n        2: {\n          id: 'deadNetPrice',\n          title: 'Dead Net Price',\n          inputs: {\n            1: deadNetCurrentYear,\n            2: deadNetPriorYear\n          }\n        }\n      }\n    }\n  };\n});\n//# sourceMappingURL=intFormulas.js.map\n\n//# sourceURL=/modules/intFormulas.js"),eval("define('modules/buildDom',['require'],function (require) {\n  function dropDownItem(formulasObj) {\n    var listItem = document.createElement('div');\n    listItem.className = 'formula';\n    listItem.id = formulasObj.id;\n    listItem.innerHTML = formulasObj.title;\n    return listItem;\n  }\n\n  function formHeader() {\n    var formHeaderDiv = document.createElement('div');\n    formHeaderDiv.className = 'form-header';\n    var currentYear = document.createElement('div');\n    currentYear.className = 'year-title';\n    currentYear.innerHTML = 'Current Year';\n    var priorYear = document.createElement('div');\n    priorYear.className = 'year-title';\n    priorYear.innerHTML = 'Prior Year';\n    formHeaderDiv.append(currentYear);\n    formHeaderDiv.append(priorYear);\n    return formHeaderDiv;\n  }\n\n  function formInput(inputObj) {\n    if (inputObj.hasOwnProperty('sections')) {\n      var inputArr = [];\n\n      for (var key in inputObj.sections) {\n        inputArr.push(buildSectionInputLabel(inputObj.sections[key]));\n      }\n\n      return inputArr;\n    } else {\n      return buildSingleInputLabel(inputObj);\n    }\n\n    function buildSingleInputLabel(inputObj) {\n      var inputHolderObj = {};\n\n      for (key in inputObj.inputs) {\n        var inputHolder = document.createElement('div');\n        inputHolder.className = 'input-holder';\n        var inputLabel = document.createElement('label');\n        inputLabel.setAttribute('for', inputObj.inputs[key].id);\n        inputLabel.innerHTML = inputObj.inputs[key].label;\n        var input = document.createElement('input');\n        input.type = 'tel';\n        input.setAttribute('inputmode', 'numeric');\n        input.autocomplete = 'off';\n        input.dataset.format = inputObj.inputs[key].dataFormat;\n        input.id = inputObj.inputs[key].id;\n        input.name = inputObj.inputs[key].id;\n        input.pattern = inputObj.inputs[key].pattern;\n        inputHolder.append(inputLabel);\n        inputHolder.append(input);\n        inputHolderObj[key] = inputHolder;\n      }\n\n      return inputHolderObj;\n    }\n\n    function buildSectionInputLabel(inputObj) {\n      var inputHolder = document.createElement('div');\n      inputHolder.className = 'input-holder section';\n      var inputTitle = document.createElement('div');\n      inputTitle.className = 'input-title';\n      inputTitle.innerHTML = inputObj.title;\n      inputHolder.append(inputTitle);\n\n      for (key in inputObj.inputs) {\n        var inputWrapper = document.createElement('div');\n        inputWrapper.className = 'input-wrapper';\n        var inputLabel = document.createElement('label');\n        inputLabel.setAttribute('for', inputObj.inputs[key].id);\n\n        if (inputObj.inputs[key].year == 'current') {\n          inputLabel.innerHTML = 'Current Year';\n        } else {\n          inputLabel.innerHTML = 'Prior Year';\n        }\n\n        var input = document.createElement('input');\n        input.type = 'tel';\n        input.setAttribute('inputmode', 'numeric');\n        input.autocomplete = 'off';\n        input.dataset.format = inputObj.inputs[key].dataFormat;\n        input.id = inputObj.inputs[key].id;\n        input.name = inputObj.inputs[key].id;\n        input.pattern = inputObj.inputs[key].pattern;\n        inputWrapper.append(inputLabel);\n        inputWrapper.append(input);\n        inputHolder.append(inputWrapper);\n      }\n\n      return inputHolder;\n    }\n  }\n\n  function outputTotal(total, outputType) {\n    switch (outputType) {\n      case 'currency':\n        if (isNaN(total) || !isFinite(total)) {\n          document.getElementById('outputTotal').innerHTML = '$0.00';\n        } else {\n          total = total.toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n          document.getElementById('outputTotal').innerHTML = '$' + total;\n        }\n\n        break;\n\n      case 'percentage':\n        if (isNaN(total) || !isFinite(total)) {\n          document.getElementById('outputTotal').innerHTML = '0.0%';\n        } else {\n          total = total * 100;\n          document.getElementById('outputTotal').innerHTML = total.toFixed(1) + '%';\n        }\n\n        break;\n\n      case 'rounded':\n        if (isNaN(total) || !isFinite(total)) {\n          document.getElementById('outputTotal').innerHTML = '0.0';\n        } else {\n          document.getElementById('outputTotal').innerHTML = total.toFixed(1);\n        }\n\n        break;\n\n      case 'integer':\n        if (isNaN(total) || !isFinite(total)) {\n          document.getElementById('outputTotal').innerHTML = '0';\n        } else {\n          document.getElementById('outputTotal').innerHTML = total.toFixed(0);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return {\n    dropDownItem: dropDownItem,\n    formHeader: formHeader,\n    formInput: formInput,\n    outputTotal: outputTotal\n  };\n});\n//# sourceMappingURL=buildDom.js.map\n\n//# sourceURL=/modules/buildDom.js"),eval("var REGEX_STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\nvar REGEX_ARGUMENT_NAMES = /([^\\s,]+)/g;\nvar SANITIZE = {\n  '&': '',\n  '<': '',\n  '>': '',\n  '\"': '',\n  \"'\": ''\n};\ndefine('modules/methods',['require'],function (require) {\n  function getArgs(func) {\n    var funcString = func.toString().replace(REGEX_STRIP_COMMENTS, '');\n    var argArray = funcString.slice(funcString.indexOf('(') + 1, funcString.indexOf(')')).match(REGEX_ARGUMENT_NAMES);\n    if (argArray === null) argArray = [];\n    return argArray;\n  }\n\n  function getSessionValues() {\n    var storageArrKeys = Object.keys(sessionStorage);\n    var data = {};\n\n    for (var _i = 0; _i < storageArrKeys.length; _i++) {\n      key = storageArrKeys[_i];\n      data[key] = sessionStorage[key];\n    }\n\n    return data;\n  }\n\n  function setSessionValues(key, value) {\n    if (value != 0) {\n      sessionStorage.setItem(key, value);\n    } else {\n      sessionStorage.removeItem(key);\n    }\n  }\n\n  function sanitizeInput(data) {\n    return data.replace(/[^0-9]/g, \"\");\n  }\n\n  return {\n    getArgs: getArgs,\n    getSessionValues: getSessionValues,\n    setSessionValues: setSessionValues,\n    sanitizeInput: sanitizeInput\n  };\n});\n//# sourceMappingURL=methods.js.map\n\n//# sourceURL=/modules/methods.js"),eval("define('main',['module', 'modules/custFormulas', 'modules/intFormulas', 'modules/buildDom', 'modules/methods'], function (module, custFormulas, intFormulas, buildDom, methods) {\n  var formulas;\n  var defaultFormula;\n\n  if (module.config().formula == 'customer') {\n    formulas = custFormulas;\n    defaultFormula = 'pennyProfit';\n  } else if (module.config().formula == 'internal') {\n    formulas = intFormulas;\n    defaultFormula = 'marginalContributionCurrentYear';\n  }\n\n  var currentValues = methods.getSessionValues();\n  var currentFormula;\n  var currentArguments;\n  var currentOutputType;\n\n  for (key in formulas) {\n    var listItem = buildDom.dropDownItem(formulas[key]);\n    listItem.addEventListener('click', function (data) {\n      document.getElementById('dropdownButton').innerHTML = formulas[this.id].title;\n      updateInputDom(this.id);\n    });\n    document.getElementById('dropdownList').appendChild(listItem);\n  }\n\n  function updateInputDom(domId) {\n    var inputContainer = document.getElementById('inputContainer');\n\n    while (child = inputContainer.firstChild) {\n      child.remove();\n    }\n\n    currentFormula = formulas[domId].formula;\n    currentArguments = methods.getArgs(formulas[domId].formula);\n    currentOutputType = formulas[domId].outputType;\n    var inputObj = buildDom.formInput(formulas[domId]);\n\n    if (Array.isArray(inputObj)) {\n      var formHeader = buildDom.formHeader();\n      inputContainer.appendChild(formHeader);\n      inputObj.forEach(function (inputHolder) {\n        buildInputItems(inputHolder);\n      });\n    } else {\n      for (var key in inputObj) {\n        buildInputItems(inputObj[key]);\n      }\n    }\n\n    function buildInputItems(inputObj) {\n      var inputItem = inputObj.getElementsByTagName('INPUT')[0];\n      var inputItemArray = inputObj.getElementsByTagName('INPUT');\n\n      for (var i = 0; i < inputItemArray.length; i++) {\n        inputItemArray[i].oninput = function () {\n          inputChange(this);\n        };\n\n        inputItemArray[i].onclick = function () {\n          if (typeof this.selectionStart == 'number') {\n            this.selectionStart = this.selectionEnd = this.value.length;\n            this.style.caretColor = 'auto';\n          } else if (typeof this.createTextRange != 'undefined') {\n            this.focus();\n            var range = this.createTextRange();\n            range.collapse(false);\n            range.select();\n            this.style.caretColor = 'auto';\n          }\n        };\n\n        if (currentValues[inputItemArray[i].id]) {\n          inputItemArray[i].value = currentValues[inputItemArray[i].id];\n        } else {\n          inputItemArray[i].value = formatInputValue(inputItemArray[i]);\n        }\n      }\n\n      inputContainer.appendChild(inputObj);\n    }\n\n    updateTotal();\n  }\n\n  function formatInputValue(data) {\n    var sanitizeValue = methods.sanitizeInput(data.value);\n    var currentValue = sanitizeValue;\n\n    if (currentValue.length === 0) {\n      currentValue = 0;\n    }\n\n    if (data.dataset.format == 'currency') {\n      var currentValueString = currentValue.toString().replace('.', '');\n\n      if (currentValueString.length < 2) {\n        currentValueString = '0' + currentValueString;\n      }\n\n      var outputTotalString = currentValueString.substring(0, currentValueString.length - 2) + '.' + currentValueString.substring(currentValueString.length - 2);\n      var outputTotal = parseFloat(outputTotalString);\n      var output = outputTotal.toFixed(2);\n      return output;\n    } else {\n      return parseFloat(currentValue);\n    }\n  }\n\n  function inputChange(data) {\n    var formatedValue = formatInputValue(data);\n    currentValues[data.id] = formatedValue;\n    methods.setSessionValues(data.id, formatedValue);\n    updateTotal();\n    return data.value = formatedValue;\n  }\n\n  function updateTotal() {\n    var totalArray = currentArguments.reduce(function (arr, data) {\n      var testValue = Number(currentValues[data]);\n\n      if (!isNaN(testValue) && testValue != 0) {\n        arr.push(currentValues[data]);\n      }\n\n      return arr;\n    }, []);\n    buildDom.outputTotal(currentFormula.apply(null, totalArray), currentOutputType);\n  }\n\n  document.getElementById('reset').onclick = function (event) {\n    event.preventDefault();\n    currentArguments.forEach(function (id) {\n      document.getElementById(id).value = '';\n      document.getElementById(id).value = inputChange(document.getElementById(id));\n    });\n    currentValues = {};\n    buildDom.outputTotal(undefined, currentOutputType);\n    sessionStorage.clear();\n  };\n\n  function init() {\n    document.getElementById('dropdownButton').innerHTML = formulas[defaultFormula].title;\n    updateInputDom(defaultFormula);\n  }\n\n  init();\n\n  document.getElementById('form').onsubmit = function (event) {\n    event.preventDefault();\n    document.getElementById('reset').focus();\n    document.getElementById('reset').blur();\n  };\n\n  document.getElementById('dropdownButton').onclick = function () {\n    document.getElementById('dropdownList').classList.toggle('show');\n  };\n\n  window.onclick = function (event) {\n    if (!event.target.matches('.dropdown-button')) {\n      if (dropdownList.classList.contains('show')) {\n        dropdownList.classList.remove('show');\n      }\n    }\n  };\n\n  var screenHeight = window.innerHeight * 0.01;\n  document.documentElement.style.setProperty('--screenHeight', \"\".concat(screenHeight, \"px\"));\n  window.addEventListener('resize', function () {\n    screenHeight = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty('--screenHeight', \"\".concat(screenHeight, \"px\"));\n  });\n});\n//# sourceMappingURL=main.js.map\n\n//# sourceURL=/main.js");

//# sourceMappingURL=main.js.map
